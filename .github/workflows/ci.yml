name: CI

on:
  push:
  pull_request:

jobs:
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - uses: pnpm/action-setup@v2
      with:
        version: 10.10.x
        run_install: false
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Run tests
      run: pnpm test

    - name: Build
      run: pnpm build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Deploy to S3
      run: |
        aws s3 sync ./out s3://dorian-frontend --delete

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    outputs:
      lambda_package_key: ${{ steps.set-output.outputs.lambda_package_key }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Run tests
      run: pytest
      env:
        JWT_SECRET_KEY: test-secret

    - name: Build Lambda package
      run: |
        mkdir -p package
        pip install --platform manylinux2014_x86_64 --target=./package --implementation cp --python-version 3.9 --only-binary=:all: --upgrade pip setuptools wheel
        pip install --platform manylinux2014_x86_64 --target=./package --implementation cp --python-version 3.9 --only-binary=:all: --upgrade exceptiongroup
        pip install --platform manylinux2014_x86_64 --target=./package --implementation cp --python-version 3.9 --only-binary=:all: --upgrade -r requirements.txt
        cp -r app package/
        cd package
        zip -r ../lambda_deployment.zip .
        cd ..

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Upload Lambda package to S3
      id: set-output
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        PACKAGE_KEY="lambda_deployment_${TIMESTAMP}.zip"
        aws s3 cp lambda_deployment.zip s3://dorian-terraform-state/${PACKAGE_KEY}
        echo "lambda_package_key=${PACKAGE_KEY}" >> $GITHUB_OUTPUT

  terraform:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./deployment

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init -reconfigure

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -var="environment=dev" -var="google_client_id=${{ secrets.GOOGLE_CLIENT_ID }}" -var="google_client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}" -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}" -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" -var="lambda_package_key=${{ needs.backend.outputs.lambda_package_key }}"

    - name: Terraform Apply
      #if: github.ref == 'refs/heads/main'
      run: terraform apply -var="environment=dev" -var="google_client_id=${{ secrets.GOOGLE_CLIENT_ID }}" -var="google_client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}" -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}" -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" -var="lambda_package_key=${{ needs.backend.outputs.lambda_package_key }}" -auto-approve
